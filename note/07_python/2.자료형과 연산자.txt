2. 자료형과 연산자
- 변수
변수 선언 : 변수 선언을 위한 타입이 없고, 별도 선언 과정도 없음
변수 할당 : 할당연산자를 이용해 변수값을 할당하면 타입이 셋팅됨(모든 변수는 객체)
변수 이름 규칙 : 문자로 시작해야하고, 숫자, _로 변수명 작성 / 예약어 사용 불가

- 기본자료형
숫자 : int, float, complex(복소수)
문자 : str, 문자 슬라이싱, raw데이터처리 시 이스케이프문자(\n, \, \t)를 그대로 저장함
논리 : False로 판별되는 경우 0, None, [], (), {}

- 포맷팅 : 출력할 문자, 숫자, 날짜 데이터에 형식을 지정하는 것
문법 : "{[인덱스]:[공백대체문자][정렬방법][자릿수][타입]}".format(변수명)

- 연산자
산술연산 : + - * / // % **
할당연산 : = += -= *= /= //= %=
논리연산 : & and | or not
비트연산 : ^(XOR), &(and) |(or) ~(not)
논리연산자가 비교연산자보다 우선순위가 높다

- 문자열
문자열슬라이싱변수[from:to(stop):by(step)]
len(문자열변수)
upper() : 대문자로
lower() : 소문자로
title() : 각 어절의 앞글자만 대문자로
capitalize() : 첫 문자만 대문자로
count('찾을문자열') : '찾을문자열'이 몇 개 들어오는지 갯수를 반환
find('찾을문자열') : '찾을문자열'이 왼쪽부터 시작해 몇 번째에 있는지 index를 반환(자바indexOf)
rfind('찾을문자열') : '찾을문자열'이 오른쪽부터 시작해 몇 번째에 있는지 index를 반환(자바lastIndexOf)
                         (찾을 문자열이 없으면 -1을 반환)
    cf. index('찾을문자열') : '찾을문자열'이 왼쪽부터 시작해 몇 번째에 있는지 index를 반환
                              (찾을 문자열이 없으면 오류)
startswith('특정문자열') : '특정문자열'로 시작하는지 여부를 반환                            
endswith('특정문자열') : '특정문자열'로 끝나는지 여부를 반환     
strip() : 좌우 공백제거(trim)
rstrip() : 오른쪽 공백제거
lstrip() : 왼쪽 공백제거
split() : 문자열을 공백이나 다른 문자 기준으로 나눠 리스트로 반환
isdigit() : 문자열이 숫자문자열인지 여부를 반환
islower() : 문자열이 소문자인지 여부를 반환
isupper() : 문자열이 대문자인지 여부를 반환
replace(oldStr, newStr) : oldStr을 newStr로 변경

- 시간, 날짜
from datetime import datetime, date, time
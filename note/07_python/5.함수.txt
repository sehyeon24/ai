5. 함수
- 반복해서 사용할 코드를 묶어 놓고 그것에 이름을 붙인 것
- 오버로딩 불가
- 함수의 정의
def 함수명([매개변수1, 매개변수2, ..]):
  명령어1
  명령어2
  return 리턴할 값 (명령어)

- 함수의 정의 및 사용
1) docstring
def 함수명():
	'''
	'''
2) 지역변수(local var)와 전역변수(global var)
지역변수 : 함수 안에서 만든 변수(함수를 수행하고 벗어나면 사용하지 못함(사라짐))
전역변수 : 함수 밖에서 만든 변수(함수 안과 밖에서 사용 가능)
3)값에 의한 호출
함수에 인수로 전달되는 변수가 스칼라변수(문자, 숫자, 논리형)일 때
4) 참조에 의한 호출
함수에 인수로 전돨되는 변수가 리스트, 튜플, 셋, 딕셔너리, 객체일 경우
5)함수의 이름 변경
Python : 함수형언어,객체지향언어

- return
def 함수명(n):
    """
    """
    result = []
    a, b = 0, 1
    while a < n:  # a>=n이면 while문 멈춤
        result.append(a)
        a, b = b, a+b
    return result

- 함수의 매개변수
1) 기본값을 갖는 매개변수
기본값을 갖는 매개변수 사용 시 순서인수가 뒤에 와야 함
(순서인수,기본값을 갖는 매개 변수)
2) 기본변수를 갖는 매개변수
기본변수가 스칼라변수(문자, 숫자, 논리형)일 때
기본변수가 리스트, 셋, 딕셔너리 또는 객체일 때
3) 순서인수, 키워드인수
순서인수 : 함수에 정의된 순서대로 전달방식(이 기본값일 경우)
ex.
def fun(a, b):
  return a*10 + b
fun(a, b)
키워드인수 : 인수의 이름을 명시적으로 전달방식
# 변수에 기본값이 있는 키워드인수는 함수 정의 시에는 순서인수->키워드인수 순서를 지켜야하지만
호출 시 변수명을 명시하며 순서를 바꿀 수 있음
def function명(변수명1, 변수명2, ... 변수명n=기본값):
ex.
def fun(a, b):
  return a*10 + b
fun(b=3, a=4)  # 호출 시
함수 정의(선언) 시 순서인수와 키워드인수가 같이 올 때는 순서인수 -> 키워드인수 순으로
4) 튜플 매개변수를 이용한 가변인수 설정
# args 앞의 * : args가 튜플로 전달(되도록 함)
def add(*args):
    '전달받은 매개변수들의 합을 return, 매개변수가 없는 경우 0을 return'
    # print(args)
    # 함수에 return이 없으면 print()로 감싸지 않고 출력
    # print()로 출력시 None이 같이 출력됨(return값이 없으므로)    
    sum = 0  # 누적변수
    for num in args:
        sum += num
    return sum
5) 딕셔너리 매개변수
딕셔너리인수 : 여러 개의 키워드인수를 딕셔너리 형태로 받아 가변 키워드인수로 처리
6) 함수 정의 시 매개변수의 순서
순서인수 > 튜플인수(*) > 키워드인수(기본값) > 딕셔너리인수(**)
7) 인수의 언패킹
튜플인수 언패킹
numbers = (1, 2, 3, 4, 5, 6, 7, 8)
add(*numbers)
add(numbers[0], numbers[1], numbers[2], numbers[3], numbers[4])
딕셔너리인수 언패킹
def func8(**data):
    for item in data.items():
        print(item)
func8(shape='rect', height=30, width=40)
info = {'shape':'triangle', 'height':40, 'width':30}
info
func8(**info) 

- 람다식 : return 한 줄짜리 작은 익명함수
labmda 매개변수 : 출력될 값

- 파이썬 내장함수
import하지 않고 바로 사용 가능한 함수
키워드처럼 간주되므로, 식별자로 사용하는 것을 피한다
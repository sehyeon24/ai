7. 객체지향 프로그래밍
- 객체와 클래스
class 클래스명(상속받을 클래스명):
    변수나 함수들을
    (instance, static, class)

- 변수와 메소드(함수)
클래스변수 vs. 인스턴스변수 vs. static변수
클래스메소드 vs. 인스턴스메소드 vs. static메소드

- 생성자(init())와 소멸자(del())
생성자 : __init__(self, 매개변수...) 객체가 생성될 때 1회 자동 실행
        생성 시 필요한 코드(인스턴스 변수 초기화)를 포함
소멸자 : __del__(self) 객체가 소멸될 때 자동 실행
        소멸 시 필요한 코드를 포함
        인스턴스 객체의 레퍼런스 카운트가 0이 될 때 실행(객체를 참조하는 수가 0일 때)

- static 변수
-- 변수의 종류
인스턴스변수 : 생성자를 통함
클래스변수 : 클래스 내 선언
static변수 : 클래스 내에 선언한 변수 중 변수명 앞에 __(under score 2개)를 붙임
--- 변수명 앞에 __를 붙이면, 클래스명._클래스명__static변수명으로 참조함
--- 클래스 변수는 클래스나 인스턴스에서 바로 접근 가능.
--- 반면, __로 시작하는 변수는 바로 접근 불가하고, 클래스명._클래스명__static변수명으로 접근해야 하므로 외부에서 실수로 접근하거나 변경하는 것을 방지할 수 있음
--- static 변수는 클래스 내부에서만 접근하도록 하려는 의도를 전달하는 용도로 쓰임

- 상속과 재정의
class Cal:
    def __init__(self, num1=1, num2=2):
        print('두 수를 초기화')
        self.num1 = num1
        self.num2 = num2

    def add(self):  # 매개변수 없이 실행
        return self.num1 + self.num2

    def sub(self):
        return self.num1 - self.num2 if self.num1 > self.num2 else self.num2 - self.num1  # 조건식

    def __str__(self):
        return 'num1은 %d, num2는 %d' % (self.num1, self.num2)

class Cal_inheri(Cal):  # Cal로부터 상속받는 클래스
    def mul(self):
        return self.num1 * self.num2
obj = Cal_inheri(2, 2)
print(obj)
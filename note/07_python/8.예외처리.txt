8. 예외처리
- 예외처리
예외가 날 가능성이 있는 부분에 대해 미리 예상하고, 그에 대한 처리를 프로그래밍하는 것 ( 이유 : 좀 더 안정적으로 실행할 수 있도록 함)
ex. 파일을 다룰 때, 파일이 없거나 쓰기 금지로 인한 오류 발생 가능성
ex. 데이터베이스 프로그래밍 시 제약조건 등에 의한 CRUD 명령 수행 오류. DBMS 서버 오류
ex. 네트워크 프로그래밍 시 네트워크 연결 실패 오류
ex. 웹 프로그래밍 작성 시 웹 서버 오류
ex. 리스트나 튜플의 인덱스를 버서난 참조로 인한 오류
ex. 웹크롤링 시 
    try:
        데이터 수집코드
    except:
        오류 발생 시 대신 실행할 코드

- try ~ except로 예외처리
try:
    예외가 발생할 가능성이 있는 명령어들
    ..
except:
    예외가 발생했을 경우 실행할 명령어
-- 예외를 지정한 처리
try:
    예외가 발생할 수도 있는 문장들
except 예외타입1:
    해당 예외가 발생할 경우 실행할 문장
except 예외타입2: (최상위 예외타입이 아래에 있어야 함.)
    해당 예외가 발생할 경우 실행할 문장
-- 예외인수(e)
try:
    예외가 발생할 수도 있는 문장들
except 예외타입 as e:
    print(e)  # 튜플형태로 예외메세지가 출력됨
    print(e.args[0]  # 에러메세지만 출력됨

- raise : 강제 예외 발생

- 추상클래스
python은 추상클래스를 생성할 수 없으나, raise를 이용해서 추상클래스를 흉내냄
추상클래스 : 추상메소드가 1개 이상 포함된 객체를 생성할 수 없는 클래스
-- 추상메소드는 상속받은 클래스에서 구현해야 함

- 파일 정리 작업
try:
    with open('data/ch08.txt') as f:
        lines = f.readlines()
    print(lines)
except FileNotFoundError as e:
    print(e)

1. 예외
: 프로그램에서 문제가 발생될만한 곳을 예상해 사전에 프로그래밍 하는 것

2. 예외처리 문법(try ~ catch)
try {
     try블럭 ; 익셉션이 발생할 가능성이 있는 명령문들(문제가 발생할 수 있는 로직을 기술)

}catch(익셉션타입 익셉션변수) {
       그 익셉션을 처리하는 명령문(try블록안에서 문제가 발생했을 때 대처방안 기술);

}finally {
          익셉션 발생 여부와 상관없이 맨 마지막에 실행할 명령문;
}

- 자바는 예외를 객체로 취급함. 예외가 발생하면 예외 객체가 자동 생성됨.

- 체크 예외(RuntimeException외 Exception)
: 컴파일러가 체크하는 예외. 컴파일 시점에 try-catch를 사용하지 않으면 항상 throws에 던지는 예외를 선언해야 함.

- 언체크 예외(RuntimeException)
: 컴파일러가 체크하지 않는 예외. try-catch를 하지 않아도 throws를 생략할 수 있음.

- catch문에 예외처리를 여러 개 할 수 있음

- finally 블럭은 try-catch문의 영향 없이 무조건 실행됨.

3. 예외처리 문법(throws)
나를 호출한(실행시키는) 쪽으로 예외를 던져버리는 방식.
try {
     try블럭 ; 익셉션이 발생할 가능성이 있는 명령문들(문제가 발생할 수 있는 로직을 기술)

}catch(익셉션타입 익셉션변수) {
       그 익셉션을 처리하는 명령문(try블록안에서 문제가 발생했을 때 대처방안 기술);

}finally {
          익셉션 발생 여부와 상관없이 맨 마지막에 실행할 명령문;
}
private void ~ throws ~ {
}

3. 자주 사용되는 예외들
- ArrayIndexOutOfBoundsException : 배열을 사용시 존재하지 않는 index값을 호출하면 발생함.
- NullPointerException : 존재하지 않는 객체를 가리킬 때 발생함.
- NumberFormanException : 숫자로 변경할 수 없는 문자열을 변경하려고 함.

4. 강제로 예외 발생시키기(코드에서 예외 발생시키기)
throw new Exception("에러메세지");

*예외가 발생했을 때 프로세스가 죽지 않게 예외처리를 자체적으로 처리할 수도 있고(try-catch),
  직접 처리하지 않고 호출한 곳에서 하게끔 던져버릴 수도 있음(throws).
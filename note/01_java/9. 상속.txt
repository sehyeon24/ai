1. 상속(Inheritance)
: 상속이란 부모클래스가 가지고 있는 속성과 메서드를 활용할 수 있는 개념

접근제어자 [final/abstract] class 클래스이름 extends 상위클래스(super class) {
	추가할 멤버변수선언;
	생성자;
	추가할 메소드선언;
	}

- 다양한 객체(타입)를 상속을 통해 하나의 객체(타입)으로 묶을 수 있다.

2. Object클래스 
: 모든 클래스의 최고 조상으로 조상이 없는 클래스는 자동적으로 Object 클래스를 상속받게 됨.

3. 오버라이드 (override : 재정의)
- 생성자 오버로딩(overloading = polymorphism 중복정의)
: 인자의 타입이 다르면 같은 이름의 메소드라도 다른 기능으로 중복정의가 가능한 것.
- 오버라이드(override = 재정의)
: 부모 클래스의 메소드를 자식 클래스에서 재정의 함.
  자식 클래스가 부모 클래스를 상속해 자식에게 없는 메소드를 호출하면 부모 클래스에 가서 해당 메소드를 찾음.
  만약, 부모 클래스의 메소드를 자식 클래스에서 동일한 이름으로 다시 재정의 하면 부모 클래스의 메소드를 찾지 않고 자식 클래스의 메소드를 호출함.

4. super 키워드(오버라이드의 장점과 단점의 이해) : 부모를 찾는 키워드
- 하위 클래스에 의해 가려진 상위 클래스의 멤버 변수나 메소드에 접근할 때
super.객체변수
super.메소드이름(매개변수)
override의 장점 : 잘 만들어진 클래스를 상속 받아 일부 메소드를 수정(재정의) 가능.
		하지만, 자식 클래스에서 부모 클래스를 override하면 부모 클래스의 메소드 사용 불가.
		자식 클래스에서 부모 클래스의 메소드를 사용하고자 할 때 super 키워드를 사용함.
- 상위 클래스의 생성자를 호출할 때
super(매개변수); 이 super(매개변수)문장은 반드시 첫 번째 라인에 와야 함.
super( ); 매개변수 없는 슈퍼클래스의 생성자 호출

5. 상속 시 final
- final class 클래스명 { } 상속불가
- final void 메서드명( ){ } 오버라이딩 불가